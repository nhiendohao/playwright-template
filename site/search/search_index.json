{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Project Introduction","text":"<p>This is an template Playwright project. I implemented this framework for sharing playwright experiences from basic to advances.</p>"},{"location":"index.html#main-topics","title":"Main topics","text":"<ul> <li>Introduce basic use cases with Playwright here</li> <li>Introduce advance framework design with:<ul> <li>Page Object Repo &amp; Page Factory</li> <li>ScreenPlay</li> </ul> </li> <li>Custom Reporter:<ul> <li>Allure Report</li> <li>TestRail Repoter</li> </ul> </li> </ul> <p>Template Pipepline for CI/CD:</p> <ul> <li>Github action</li> <li>CircleCI : TBD</li> </ul>"},{"location":"index.html#contribution","title":"Contribution","text":"<p>If you've ever wanted to contribute to this tool, and a great cause, now is your chance! Feel free to create issues &amp; PR incase you want to contribute to my project</p>"},{"location":"license.html","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2023 Nhien Do</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"sections/development/CHANGELOG.html","title":"CHANGELOG","text":"<p>Check the Github Releases out!</p>"},{"location":"sections/development/contributing-guide.html","title":"Contributing to <code>My Playwright Project</code>","text":"<p><code>My Playwright Project</code> is open source testing framework. It is what it is today because community members have opened issues, provided feedback, and contributed to the knowledge loop. Whether you are a seasoned open source contributor or a first-time committer, we welcome and encourage you to contribute code, documentation, ideas, or problem statements to this project.</p> <ol> <li>About this document</li> <li>Getting the code</li> <li>Setting up an environment</li> <li>Testing My Playwright Project</li> <li>Submitting a Pull Request</li> </ol>"},{"location":"sections/development/contributing-guide.html#about-this-document","title":"About this document","text":"<p>The rest of this document serves as a more granular guide for contributing code changes to <code>My Playwright Project</code> (this repository). It is not intended as a guide for using <code>Automation Testing 101</code>, and some pieces assume a level of familiarity with Typescripts &amp; Automation Test experiences. Specific code snippets in this guide assume you are using macOS or Linux and are comfortable with the command line.</p> <ul> <li>Branches: All pull requests from community contributors should target the <code>main</code> branch (default). If the change is needed as a patch for a minor version of dbt that has already been released (or is already a release candidate), a maintainer will backport the changes in your PR to the relevant \"latest\" release branch (<code>1.0.&lt;latest&gt;</code>, <code>1.1.&lt;latest&gt;</code>, ...). If an issue fix applies to a release branch, that fix should be first committed to the development branch and then to the release branch (rarely release-branch fixes may not apply to <code>main</code>).</li> <li>Releases: Before releasing a new minor version, we prepare a series of beta release candidates to allow users to test the new version in live environments. This is an important quality assurance step, as it exposes the new code to a wide variety of complicated deployments and can surface bugs before official release. Releases are accessible via pip.</li> </ul>"},{"location":"sections/development/contributing-guide.html#external-contributor","title":"External contributor","text":"<p>You can contribute to <code>My Playwright Project</code> by forking the <code>My Playwright Project</code> repository. For a detailed overview on forking, check out the GitHub docs on forking. In short, you will need to:</p> <ol> <li>Fork the <code>My Playwright Project</code> repository</li> <li>Clone your fork locally</li> <li>Check out a new branch for your proposed changes</li> <li>Push changes to your fork</li> <li>Open a pull request against <code>https://github.com/nhiendohao/playwright-template</code> from your forked repository</li> </ol>"},{"location":"sections/development/contributing-guide.html#setting-up-an-environment","title":"Setting up an environment","text":"<p>There are some tools that will be helpful to you in developing locally. While this is the list relevant for <code>My Playwright Project</code> development, many of these tools are used commonly across open-source Typescripts projects.</p>"},{"location":"sections/development/contributing-guide.html#tools","title":"Tools","text":"<ul> <li>Visual Studio Code with Playwright extension</li> <li>Install nodejs</li> <li>Install playwright</li> </ul> npx playwright install --with-deps <ul> <li>Install some dependencies:</li> </ul> npm install"},{"location":"sections/development/contributing-guide.html#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>Code can be merged into the current development branch <code>main</code> by opening a pull request. Maintainer will review your PR. They may suggest code revision for style or clarity, or request that you add unit or integration test(s). These are good things! We believe that, with a little bit of help, anyone can contribute high-quality code.</p> <p>Automated tests run via GitHub Actions / CircleCI. If you're a first-time contributor, all tests (including code checks and unit tests) will require a maintainer to approve. Changes in the <code>My Playwright Project</code> repository trigger integration tests against heroku test app.</p> <p>Once all tests are passing and your PR has been approved,<code>My Playwright Project</code> maintainer will merge your changes into the active development branch. And that's it! Happy developing :tada:</p>"},{"location":"sections/guide/1_debug.html","title":"Debug","text":"<p>Command to debug sample test</p> <p>Default debug: <pre><code>npx playwright test --debug\n</code></pre></p> <p>Debug specific test (e.g: run debug for Login.test.ts): <pre><code>npx playwright test Login.test --debug\n</code></pre></p> <p>Debug specific test at line of code(e.g: run debug for Login.test.ts line 13): <pre><code>npx playwright test Login.test:13 --debug\n</code></pre> Debug test with Playwright UI (only available since 1.32): <pre><code>npx playwright test --ui\n</code></pre></p> <p>Trace viewer</p> <p>Playwright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has ran. You can open traces locally or in your browser on <code>trace.playwright.dev</code>.</p> <p></p>    Your browser does not support the video tag."},{"location":"sections/guide/1_debug.html#viewing-the-trace","title":"Viewing the trace","text":"<p>You can open the saved trace using Playwright CLI or in your browser on <code>trace.playwright.dev</code>.</p> jsjavapythoncsharp <pre><code>npx playwright show-trace trace.zip\n</code></pre> <pre><code>mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n</code></pre> <pre><code>playwright show-trace trace.zip\n</code></pre> <pre><code>pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip\n</code></pre>"},{"location":"sections/guide/1_debug.html#actions","title":"Actions","text":"<p>Once trace is opened, you will see the list of actions Playwright performed on the left hand side:</p> <p></p> <p></p> <p>Selecting each action reveals:</p> <ul> <li>action snapshots,</li> <li>action log,</li> <li>source code location,</li> <li>network log for this action</li> </ul> <p>In the properties pane you will also see rendered DOM snapshots associated with each action.</p>"},{"location":"sections/guide/1_debug.html#metadata","title":"Metadata","text":"<p>See metadata such as the time the action was performed, what browser engine was used, what the viewport was and if it was mobile and how many pages, actions and events were recorded.</p> <p></p>"},{"location":"sections/guide/1_debug.html#screenshots","title":"Screenshots","text":"<p>When tracing with the [<code>option: screenshots</code>] option turned on, each trace records a screencast and renders it as a film strip:</p> <p>You can hover over the film strip to see a magnified image of for each action and state which helps you easily find the action you want to inspect.</p> <p></p>"},{"location":"sections/guide/1_debug.html#snapshots","title":"Snapshots","text":"<p>When tracing with the [<code>option: snapshots</code>] option turned on, Playwright captures a set of complete DOM snapshots for each action. Depending on the type of the action, it will capture:</p> Type Description Before A snapshot at the time action is called. Action A snapshot at the moment of the performed input. This type of snapshot is especially useful when exploring where exactly Playwright clicked. After A snapshot after the action. <p></p> <p>Here is what the typical Action snapshot looks like: Notice how it highlights both, the DOM Node as well as the exact click position.</p>"},{"location":"sections/guide/1_debug.html#call","title":"Call","text":"<p>See what action was called, the time and duration as well as parameters, return value and log.</p> <p></p>"},{"location":"sections/guide/1_debug.html#console","title":"Console","text":"<p>See the console output for the action where you can see console logs or errors.</p> <p></p>"},{"location":"sections/guide/1_debug.html#network","title":"Network","text":"<p>See any network requests that were made during the action.</p> <p></p>"},{"location":"sections/guide/1_debug.html#source","title":"Source","text":"<p>See the source code for your entire test.</p> <p></p>"},{"location":"sections/guide/1_debug.html#recording-a-trace-locally","title":"Recording a trace locally","text":"<p>To record a trace during development mode set the <code>--trace</code> flag to <code>on</code> when running your tests.</p> <pre><code>npx playwright test --trace on\n</code></pre> <p>You can then open the HTML report and click on the trace icon to open the trace.</p> <pre><code>npx playwright show-report\n</code></pre>"},{"location":"sections/guide/1_debug.html#recording-a-trace-on-ci","title":"Recording a trace on CI","text":"<p>Traces should be run on continuous integration on the first retry of a failed test by setting the <code>trace: 'on-first-retry'</code> option in the test configuration file. This will produce a <code>trace.zip</code> file for each test that was retried.</p> playwright.config.ts <pre><code>import { defineConfig } from '@playwright/test';\nexport default defineConfig({\nretries: 1,\nuse: {\ntrace: 'on-first-retry',\n},\n});\n</code></pre> js-library <pre><code>const browser = await chromium.launch();\nconst context = await browser.newContext();\n// Start tracing before creating / navigating a page.\nawait context.tracing.start({ screenshots: true, snapshots: true });\nconst page = await context.newPage();\nawait page.goto('https://playwright.dev');\n// Stop tracing and export it into a zip archive.\nawait context.tracing.stop({ path: 'trace.zip' });\n</code></pre> <p>Available options to record a trace:</p> <ul> <li><code>'on-first-retry'</code> - Record a trace only when retrying a test for the first time.</li> <li><code>'on-all-retries'</code> - Record traces for all test retries.</li> <li><code>'off'</code> - Do not record a trace.</li> <li><code>'on'</code> - Record a trace for each test. (not recommended as it's performance heavy)</li> <li><code>'retain-on-failure'</code> - Record a trace for each test, but remove it from successful test runs.</li> </ul> <p>You can also use <code>trace: 'retain-on-failure'</code> if you do not enable retries but still want traces for failed tests.</p> <p>If you are not using Playwright as a Test Runner, use the [<code>property: BrowserContext.tracing</code>] API instead.</p>"},{"location":"sections/guide/1_debug.html#recording-a-trace","title":"Recording a trace","text":"<p>Traces can be recorded using the [<code>property: BrowserContext.tracing</code>] API as follows:</p> javapython asyncpython synccsharp <pre><code>Browser browser = browserType.launch();\nBrowserContext context = browser.newContext();\n// Start tracing before creating / navigating a page.\ncontext.tracing().start(new Tracing.StartOptions()\n.setScreenshots(true)\n.setSnapshots(true)\n.setSources(true));\nPage page = context.newPage();\npage.navigate(\"https://playwright.dev\");\n// Stop tracing and export it into a zip archive.\ncontext.tracing().stop(new Tracing.StopOptions()\n.setPath(Paths.get(\"trace.zip\")));\n</code></pre> <pre><code>browser = await chromium.launch()\ncontext = await browser.new_context()\n# Start tracing before creating / navigating a page.\nawait context.tracing.start(screenshots=True, snapshots=True, sources=True)\nawait page.goto(\"https://playwright.dev\")\n# Stop tracing and export it into a zip archive.\nawait context.tracing.stop(path = \"trace.zip\")\n</code></pre> <pre><code>browser = chromium.launch()\ncontext = browser.new_context()\n# Start tracing before creating / navigating a page.\ncontext.tracing.start(screenshots=True, snapshots=True, sources=True)\npage.goto(\"https://playwright.dev\")\n# Stop tracing and export it into a zip archive.\ncontext.tracing.stop(path = \"trace.zip\")\n</code></pre> <pre><code>await using var browser = playwright.Chromium.LaunchAsync();\nawait using var context = await browser.NewContextAsync();\n// Start tracing before creating / navigating a page.\nawait context.Tracing.StartAsync(new()\n{\nScreenshots = true,\nSnapshots = true,\nSources = true\n});\nvar page = context.NewPageAsync();\nawait page.GotoAsync(\"https://playwright.dev\");\n// Stop tracing and export it into a zip archive.\nawait context.Tracing.StopAsync(new()\n{\nPath = \"trace.zip\"\n});\n</code></pre> <p>This will record the trace and place it into the file named <code>trace.zip</code>.</p>"},{"location":"sections/guide/1_debug.html#viewing-the-trace_1","title":"Viewing the trace","text":"<p>You can open the saved trace using Playwright CLI or in your browser on <code>trace.playwright.dev</code>.</p>"},{"location":"sections/guide/1_debug.html#using-local-cli","title":"Using local cli","text":"jsjavapythoncsharp <pre><code>npx playwright show-trace trace.zip\n</code></pre> <pre><code>mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace trace.zip\"\n</code></pre> <p><code>bash python playwright show-trace trace.zip</code></p> <p><code>bash csharp pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip</code></p>"},{"location":"sections/guide/1_debug.html#using-traceplaywrightdev","title":"Using trace.playwright.dev","text":"<p>trace.playwright.dev is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.</p> <p></p>"},{"location":"sections/guide/1_debug.html#viewing-remote-traces","title":"Viewing remote traces","text":"<p>You can open remote traces using it's URL. They could be generated on a CI run which makes it easy to view the remote trace without having to manually download the file.</p> jsjavapythoncsharp <pre><code>npx playwright show-trace https://example.com/trace.zip\n</code></pre> <pre><code>mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args=\"show-trace &lt;https://example.com/trace.zip&gt;\"\n</code></pre> <pre><code>playwright show-trace https://example.com/trace.zip\n</code></pre> <pre><code>pwsh bin/Debug/netX/playwright.ps1 show-trace &lt;https://example.com/trace.zip&gt;\n</code></pre> <p>You can also pass the URL of your uploaded trace (e.g. inside your CI) from some accessible storage as a parameter. CORS (Cross-Origin Resource Sharing) rules might apply.</p> <pre><code>https://trace.playwright.dev/?trace=https://demo.playwright.dev/reports/todomvc/data/cb0fa77ebd9487a5c899f3ae65a7ffdbac681182.zip\n</code></pre>"},{"location":"sections/guide/2_usage.html","title":"Run test","text":"<p>Command to run sample test</p> <p>Case:</p> Run all projects <pre><code>npx playwright test\n</code></pre> <p>Case:</p> Run specifc test project(e.g: run pom project) <pre><code>npx playwright test --project=pom\n</code></pre> <p>Case:</p> Run test on specific environment (e.g: alpha) <pre><code>TEST_ENV=alpha npx playwright test\n</code></pre> <p>Case:</p> DebRunug specific test (e.g: run test for Login.test.ts) <pre><code>npx playwright test Login.test </code></pre> <p>Case:</p> Run specific test at line of code(e.g: run test for Login.test.ts line 13) <pre><code>npx playwright test Login.test:13\n</code></pre>"},{"location":"sections/guide/Report/1_Allure_report.html","title":"Allure Report","text":"<p>Package :Allure Playwright</p> <p>Precondition:</p> <ul> <li>Via playwright.config.ts: Enable Playwright Allure reporter</li> </ul> <pre><code>{\nreporter: [['line'], ['allure-playwright']]\n}\n</code></pre> Option Description Default outputFolder Path to results folder. <code>./allure-results</code> detail Hide<code>pw:api</code> and <code>hooks</code> steps in report. See here <code>true</code> suiteTitle Use test title instead of<code>allure.suite()</code>. See here <code>true</code> <ul> <li>Via CLI:</li> </ul> <pre><code>npx playwright test --reporter=allure-playwright\n</code></pre> <p>Generate Allure Report:</p> <p><code>allure generate allure-results -o allure-report --clean</code></p> <ul> <li>Generate report at folder allure-report base on json reports in allure-results folder</li> </ul> <p>Open Allure Report:</p> <pre><code>allure open allure-report\n</code></pre>"},{"location":"sections/guide/Report/2_Testrail_report.html","title":"Custom TestRail Reporter","text":"<p>Update Test Run Status on Test End, base on TestCase name.</p> <p>Begin by install the package as a dependency</p> <pre><code>npm install @dlenroc/testrail\n</code></pre>"},{"location":"sections/guide/Report/2_Testrail_report.html#logic","title":"Logic","text":"<p>Add the test suite and case identifier in the title of your test.</p> <ol> <li>Reporter would base on given Testsuite of TestRail</li> <li>If <code>TR_RUN_ID</code> is given, Reporter would use it and jump to step 4</li> <li>If <code>TR_RUN_ID</code> is not given, Create TestRun base on list of automated test cases on the go</li> <li>Update TestRun status on TestRail base on <code>TR_RUN_ID</code> from step 2 || 3</li> </ol> <pre><code>  ...\ntest('C123456 given some scenario when an action is taken then something is true', () =&gt; {})\n// multiple test cases are supported as well\ntest('C654321 C654321 C678901 given some scenario when an action is taken then something is true', () =&gt; {})\n...\n</code></pre>"},{"location":"sections/guide/Report/2_Testrail_report.html#config-reporter-on-playwright-config-file-as-below","title":"Config reporter on playwright config file as below","text":"<pre><code>reporter: [[`./tests/web/advance/testrail-reporter/testrail-reporter.ts`]],\n</code></pre> <p>Use env file for storing below environment variables:</p> <pre><code>TR_HOST_NAME= 'https://robbykei1.testrail.io'\nTR_PASSWORD= 'kaMZNBE20iJS0QCJYGpl-bwfUCtXHvXXYDge6CEs0'\nTR_USERNAME= 'nhiendohao@gmail.com'\nTR_SUITE_ID= '1'\nTR_RUN_NAME= 'Running test by env'\nTR_PROJECT_ID= '1'\nTR_RUN_ID= '250'\n</code></pre> <p>Refer to .env.local for simple setup</p>"},{"location":"sections/guide/Report/2_Testrail_report.html#configuration","title":"Configuration","text":"Environment Variable Description Required Default <code>TR_HOST_NAME</code> The host of the TestRail server to send results to. \u2714\ufe0f - <code>TR_PASSWORD</code> The password, of the user, used to authenticate with TestRail. \u2714\ufe0f - <code>TR_USERNAME</code> The username, used to authenticate with TestRail. \u2714\ufe0f - <code>TR_PROJECT_ID</code> The identifier of the TestRail project to send results to. \u2714\ufe0f - <code>TR_SUITE_ID</code> The specific test suite used for create/update test run. \u2714\ufe0f - <code>TR_RUN_ID</code> Provide runId if you want to update an existing test run \u274c If runId is not provided, new test run would be generated on the go <code>TR_RUN_NAME</code> Provide runName if you want to use specific name for test run \u274c"}]}